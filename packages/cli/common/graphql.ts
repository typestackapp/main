import fs from 'fs'
import { getGraphqlRouterConfigs, getGraphqlModules } from './util'
import { generate } from '@graphql-codegen/cli'
import { Types } from '@graphql-codegen/plugin-helpers'
export type GraphqlOptions = {}

export const graphql = async (options: GraphqlOptions) => {

    for (const graphql_server of getGraphqlRouterConfigs()) {
        var {schema} = await getGraphqlModules(graphql_server, {schema: true, resolvers: false})

        // if schema is empty
        if(!schema || schema == "" || schema.length == 0){
            console.log(`skipping, empty schema for pack:${graphql_server.pack} name:${graphql_server.name}`)
            continue
        }

        // write schema to file
        const CodegenConfig: Types.Config = {
            errorsOnly: true,
            debug: true,
            verbose: false,
            schema,
            documents: graphql_server.documents,
            generates: {
                [graphql_server.typeDefPath]: {
                    plugins: ['typescript', 'typescript-operations', 'typescript-resolvers', 'typed-document-node' ],
                    config: {
                        typesPrefix: 'I',
                        declarationKind: 'interface',
                        scalars: {
                            Object: 'any',
                            DateTime: 'Date',
                            Packages: 'Packages',
                        },
                        enumsAsTypes: true,
                        skipTypename: true,
                    }
                },
                [graphql_server.clientPath]: {
                    preset: 'client',
                    presetConfig: {
                        gqlTagName: 'gql',
                        typesPrefix: 'I',
                        declarationKind: 'interface',
                        scalars: {
                            Object: 'any',
                            DateTime: 'any',
                            Packages: 'any',
                        },
                        enumsAsTypes: true,
                        skipTypename: true,
                    }
                },
            }
        }

        try {
            // if graphql shema is empty
            if(!CodegenConfig.schema || CodegenConfig.schema == "") throw new Error('graphql schema is empty')

            // generate graphql code
            await generate(CodegenConfig, true)

            let file_result = fs.readFileSync(graphql_server.typeDefPath, 'utf8')
            file_result = `
                import { DeepRequired } from 'utility-types'
                import { Packages } from '@typestackapp/cli/config'
    
                ${file_result}
    
                // additional types generated by build-graphql.js script!
                export type GraphqlResolvers = Record<IGraphqlMethod, Record<string, any>>
    
                type GraphqlResources<T extends GraphqlResolvers> = {
                    [K in IGraphqlMethod]?: {
                        [K2 in keyof T[K]]?: IAccessOptions  
                    } 
                }
    
                export type Resources<T> = GraphqlResources<DeepRequired<IResolvers<T>>>
            `
            fs.writeFileSync(graphql_server.typeDefPath, file_result, 'utf8')
        } catch (error) {
            console.error(error)
            console.log({...CodegenConfig, schema: '...'})
        }
    }
}